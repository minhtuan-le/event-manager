// Require the mongoose extension 
const mongoose = require("mongoose");

/**
 * Generate a random category ID starts with C and 2 random character followed by four random numbers.
 * @returns {string} - A random category ID.
 */
function generateRandomID() {
    const randString = require("randomstring");
    let randID = randString.generate({
        length: 2,
        charset: "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    })
    let randNumber = Math.round(Math.random() * 10000);
    return `C${randID}-${randNumber}`;
}

/**
 * Format the current time into a specified format
 * @returns Current time in en-US, hours12 format
 */
function formatCurrentDate() {
    let currentDate = new Date();
    return currentDate.toLocaleString('en-US', {
        hour12: true,
    });
}

/**
 * Mongoose schema defining the structure of an event document.
 * 
 * @type {mongoose.Schema}
 */

/**
 * Define a category document in categories collection schema
 * @typedef {Object} eventSchema
 * @property {String} category_id - Unique identifier for an event category, generated by the generateRandomIDfunction by default.
 * @property {String} name - The name of the category; must be alphanumeric with spaces and is required.
 * @property {String} description - The description of the category, can be optinal.
 * @property {String} createdAt - The end date and time when the category was created, generated by default in a particular format.
 * @property {String} image - The URL of the category's image; defaults to "category_default.jpg".
 * @property {Array} eventList - List of event object _id associated with the category.
 */
const category = new mongoose.Schema({
    category_id: {
        type: String,
        default: generateRandomID,
        unique: true,
    },
    name: {
        type: String,
        validate: {
            validator: function(eventName) {
                // Use a regular expression to check for alphanumeric characters
                return /^[a-z\d\s]+$/i.test(eventName);
              },
              message: 'Event name must be alphanumeric.',
        },
        required: true,
    },
    description: {
        type: String,
        default: "No description provided",
    },
    image: {
        type: String,
        default: 'category_default.jpg',
    },
    createdAt: {
        type: String,
        default: formatCurrentDate,
    },
    eventList: [
        {
            type: mongoose.Schema.Types.ObjectId,
            ref: "Event",
        },
    ],
});

module.exports = mongoose.model("Category", category);