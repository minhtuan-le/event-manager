/** 
 * required mongoose module
 * @requires mongoose
 * @const
 */
const mongoose = require('mongoose');

    
/**
* Generate a random event ID starts with E and 2 random character followed by four random numbers.
* @returns {string} - A random event ID.
*/
const generatedRandomID = function generateRandomID(){
  const randString = require("randomstring");
  let randID = randString.generate({
      length: 2,
      charset: "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  })
  let randNumber = Math.round(Math.random()*10000);
  return `E${randID}-${randNumber}`;
}

/**
* Calculate the end date and time based on the start date and duration.
* @param {string} startDateTime - The start date and time as a string.
* @param {number} durationInMinutes - The duration of the event in minutes.
* @returns {Date} - The calculated end date and time.
*/
function calculateEndDate(startDateTime, durationInMinutes) {
  let endDateTime = new Date(startDateTime);
  endDateTime.setMinutes(endDateTime.getMinutes() + parseInt(durationInMinutes));
  return endDateTime;
}


/**
 * Mongoose schema defining the structure of an event document.
 * 
 * @type {mongoose.Schema}
 */

/**
 * @typedef {Object} eventSchema
 * @property {String} id - Unique identifier for an event, generated by the generateRandomIDfunction by default.
 * @property {String} name - The name of the event; must be alphanumeric and is required.
 * @property {String} description - The description of the event.
 * @property {Date} startDateTime - The start date and time of the event, also required.
 * @property {Number} durationInMinutes - The duration of the event in minutes, also required.
 * @property {Date} endDateTime - The end date and time of the event, calculated using the funtion calculateEndDate.
 * @property {Boolean} isActive - Whether the event is active, defaults to true.
 * @property {String} image - The URL of the event's image; defaults to "/images/events.png".
 * @property {Number} capacity - The capacity for the event; must be between 10 and 2000, defaults to 1000, and is required.
 * @property {Number} ticketsAvailable - The number of tickets available for the event; defaults to the event's capacity.
 * @property {Array} categoryList - List of category IDs associated with the event; at least one category is required.
 */
const eventSchema = new mongoose.Schema({
  id: {
    type: String,
    default: generatedRandomID,
    unique: true,
  },

  name: {
    type: String,
    validate: {
      validator: function(eventName) {
        // Use a regular expression to check for alphanumeric characters
        return /^[a-z\d\s]+$/i.test(eventName);
      },
      message: 'Event name must be alphanumeric.',
    },
    required: true,
  },

  description: {
    type: String,
  },

  startDateTime: {
    type: Date,
    required: true,
  },

  durationInMinutes: {
    type: Number,
    required: true,
  },

  endDateTime: {
    type: Date
  },

  isActive: {
    type: Boolean,
    default: true,
  },

  image: {
    type: String,
    default: "events.png",
    set: function(eventImage) {
      return eventImage ? `${eventImage}` : 'events.png';
    },
  },

  capacity: {
    type: Number,
    validate: {
      validator: function(eventCapacity) {
        return eventCapacity >= 10 && eventCapacity <= 2000;
      },
      message: 'Capacity must be between 10 and 2000.',
    },
    default: 1000,
    required: true,
  },

  ticketsAvailable: {
    type: Number,
    default: function () {
      return this.capacity;
    },
  },

  categories: {
    type: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Category",
      },
    ],
    default: [],
  },
});

/**
 * Mongoose pre-save hook to compute the endDateTime property before saving an event document.
 */
eventSchema.pre("save", function (next) {
  this.endDateTime = calculateEndDate(this.startDateTime, this.durationInMinutes);
  next();
});

/**
 * Mongoose model for event collection, based on the eventSchema.
 * 
 * @type {mongoose.Model}
 */
module.exports = mongoose.model("Event", eventSchema);




  